package codeowners

import (
	"fmt"
	"strings"
)

type File struct {
	RepositoryName  string
	RepositoryOwner string
	Branch          string
	Ruleset         Ruleset
}

type Ruleset []Rule

type Rule struct {
	Pattern   string
	Usernames []string
}

func (ruleset Ruleset) Compile() []byte {
	if ruleset == nil {
		return []byte{}
	}
	output := "# automatically generated by terraform - please do not edit here\n"
	for _, rule := range ruleset {
		usernames := []string{}
		for _, username := range rule.Usernames {
			if !strings.HasPrefix(username, "@") {
				username = "@" + username
			}

			usernames = append(usernames, username)
		}
		output = fmt.Sprintf("%s%s %s\n", output, rule.Pattern, strings.Join(usernames, " "))
	}
	return []byte(output)
}

func parseRulesFile(data string) Ruleset {
	var rules []Rule
	lines := strings.Split(data, "\n")
	for _, line := range lines {
		trimmed := strings.TrimSpace(line)
		if len(trimmed) == 0 {
			continue
		}
		if trimmed[0] == '#' { // ignore comments
			continue
		}
		words := strings.Split(trimmed, " ")
		if len(words) < 2 {
			continue
		}
		rule := Rule{
			Pattern: words[0],
		}
		for _, username := range words[1:] {
			if len(username) == 0 { // may be split by multiple spaces
				continue
			}

			rule.Usernames = append(rule.Usernames, strings.TrimPrefix(username, "@"))
		}
		rules = append(rules, rule)
	}

	return rules
}
